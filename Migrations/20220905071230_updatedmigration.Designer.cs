// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApi.Data;

#nullable disable

namespace WeatherApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220905071230_updatedmigration")]
    partial class updatedmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherApi.Models.CloudinessInfo", b =>
                {
                    b.Property<int>("CloudinessInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CloudinessInfoId"), 1L, 1);

                    b.Property<decimal?>("CloudinessPercentageValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrentWeatherId")
                        .HasColumnType("int");

                    b.HasKey("CloudinessInfoId");

                    b.HasIndex("CurrentWeatherId")
                        .IsUnique();

                    b.ToTable("CloudinessInfo");
                });

            modelBuilder.Entity("WeatherApi.Models.CurrentWeather", b =>
                {
                    b.Property<int>("CurrentWeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrentWeatherId"), 1L, 1);

                    b.Property<DateTime?>("CaculationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("CurrentWeatherId");

                    b.ToTable("CurrentWeather");
                });

            modelBuilder.Entity("WeatherApi.Models.RainVolumeInfo", b =>
                {
                    b.Property<int>("RainVolumeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RainVolumeInfoId"), 1L, 1);

                    b.Property<int>("CurrentWeatherId")
                        .HasColumnType("int");

                    b.Property<decimal?>("RainIn3HourPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RainInAnHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RainVolumeInfoId");

                    b.HasIndex("CurrentWeatherId")
                        .IsUnique();

                    b.ToTable("RainVolumeInfo");
                });

            modelBuilder.Entity("WeatherApi.Models.SnowVolumeInfo", b =>
                {
                    b.Property<int>("SnowVolumeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnowVolumeInfoId"), 1L, 1);

                    b.Property<int>("CurrentWeatherId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SnowIn3HourPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SnowInAnHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SnowVolumeInfoId");

                    b.HasIndex("CurrentWeatherId")
                        .IsUnique();

                    b.ToTable("SnowVolumeInfo");
                });

            modelBuilder.Entity("WeatherApi.Models.Weather", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherId"), 1L, 1);

                    b.Property<int?>("CurrentWeatherId")
                        .HasColumnType("int");

                    b.Property<string>("WeatherDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherIconId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherMain")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeatherId");

                    b.HasIndex("CurrentWeatherId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("WeatherApi.Models.WeatherMainInfo", b =>
                {
                    b.Property<int>("WeatherMainInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherMainInfoId"), 1L, 1);

                    b.Property<decimal?>("AtmosphericPressureGroundLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AtmosphericPressureSeaLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrentWeatherId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TemperatureFeelsLikeValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TemperatureInfo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TemperatureMaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TemperatureMinValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WeatherMainInfoId");

                    b.HasIndex("CurrentWeatherId")
                        .IsUnique();

                    b.ToTable("WeatherMainInfo");
                });

            modelBuilder.Entity("WeatherApi.Models.WindParameters", b =>
                {
                    b.Property<int>("WindParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WindParamId"), 1L, 1);

                    b.Property<int>("CurrentWeatherId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WindDirection")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WindGust")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WindParamId");

                    b.HasIndex("CurrentWeatherId")
                        .IsUnique();

                    b.ToTable("WindParameters");
                });

            modelBuilder.Entity("WeatherApi.Models.CloudinessInfo", b =>
                {
                    b.HasOne("WeatherApi.Models.CurrentWeather", null)
                        .WithOne("CloudinessPercentageValue")
                        .HasForeignKey("WeatherApi.Models.CloudinessInfo", "CurrentWeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherApi.Models.RainVolumeInfo", b =>
                {
                    b.HasOne("WeatherApi.Models.CurrentWeather", null)
                        .WithOne("Rain")
                        .HasForeignKey("WeatherApi.Models.RainVolumeInfo", "CurrentWeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherApi.Models.SnowVolumeInfo", b =>
                {
                    b.HasOne("WeatherApi.Models.CurrentWeather", null)
                        .WithOne("Snow")
                        .HasForeignKey("WeatherApi.Models.SnowVolumeInfo", "CurrentWeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherApi.Models.Weather", b =>
                {
                    b.HasOne("WeatherApi.Models.CurrentWeather", "CurrentWeather")
                        .WithMany("WeatherInfo")
                        .HasForeignKey("CurrentWeatherId");

                    b.Navigation("CurrentWeather");
                });

            modelBuilder.Entity("WeatherApi.Models.WeatherMainInfo", b =>
                {
                    b.HasOne("WeatherApi.Models.CurrentWeather", null)
                        .WithOne("MainInfo")
                        .HasForeignKey("WeatherApi.Models.WeatherMainInfo", "CurrentWeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherApi.Models.WindParameters", b =>
                {
                    b.HasOne("WeatherApi.Models.CurrentWeather", null)
                        .WithOne("WindParamInfo")
                        .HasForeignKey("WeatherApi.Models.WindParameters", "CurrentWeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherApi.Models.CurrentWeather", b =>
                {
                    b.Navigation("CloudinessPercentageValue");

                    b.Navigation("MainInfo");

                    b.Navigation("Rain");

                    b.Navigation("Snow");

                    b.Navigation("WeatherInfo");

                    b.Navigation("WindParamInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
